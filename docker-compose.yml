version: '3.8'

services:
  # Frontend Development Server
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - api-gateway

  # API Gateway
  api-gateway:
    build:
      context: ./apps/backend/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - ./apps/backend/api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8000
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth-service:8001
      - COMPLIANCE_SERVICE_URL=http://compliance-service:8002
      - CONSENT_SERVICE_URL=http://consent-service:8003
      - CONTRACT_SERVICE_URL=http://contract-service:8004
      - REGULATORY_SERVICE_URL=http://regulatory-service:8005
      - ANALYTICS_SERVICE_URL=http://analytics-service:8006
      - RISK_SERVICE_URL=http://risk-service:8007
      - PAYMENT_SERVICE_URL=http://payment-service:8008
      - AI_ORCHESTRATOR_URL=http://ai-orchestrator:8009
      - REDIS_URL=redis://redis:6379
    depends_on:
      - auth-service
      - compliance-service
      - consent-service
      - contract-service
      - regulatory-service
      - analytics-service
      - risk-service
      - payment-service
      - ai-orchestrator
      - redis

  # Auth Service
  auth-service:
    build:
      context: ./apps/backend/services/auth
      dockerfile: Dockerfile.dev
    ports:
      - "8001:8001"
    volumes:
      - ./apps/backend/services/auth:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8001
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_auth
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=3600
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - REFRESH_TOKEN_EXPIRY=604800
      - REDIS_URL=redis://redis:6379
      - MFA_SECRET=${MFA_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      - postgres
      - redis

  # Compliance Service
  compliance-service:
    build:
      context: ./apps/backend/services/compliance
      dockerfile: Dockerfile.dev
    ports:
      - "8002:8002"
    volumes:
      - ./apps/backend/services/compliance:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8002
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_compliance
      - REDIS_URL=redis://redis:6379
      - AI_ORCHESTRATOR_URL=http://ai-orchestrator:8009
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka

  # Consent Service
  consent-service:
    build:
      context: ./apps/backend/services/consent
      dockerfile: Dockerfile.dev
    ports:
      - "8003:8003"
    volumes:
      - ./apps/backend/services/consent:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8003
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_consent
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka

  # Contract Service
  contract-service:
    build:
      context: ./apps/backend/services/contract
      dockerfile: Dockerfile.dev
    ports:
      - "8004:8004"
    volumes:
      - ./apps/backend/services/contract:/app
      - /app/node_modules
      - contract-data:/app/data
    environment:
      - NODE_ENV=development
      - PORT=8004
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_contract
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STORAGE_TYPE=local
      - STORAGE_PATH=/app/data
      - VECTOR_DB_URL=http://vector-db:6333
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - vector-db
      - kafka

  # Regulatory Service
  regulatory-service:
    build:
      context: ./apps/backend/services/regulatory
      dockerfile: Dockerfile.dev
    ports:
      - "8005:8005"
    volumes:
      - ./apps/backend/services/regulatory:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8005
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_regulatory
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - KAFKA_BROKERS=kafka:9092
      - EU_REGULATORY_API_KEY=${EU_REGULATORY_API_KEY}
      - US_REGULATORY_API_KEY=${US_REGULATORY_API_KEY}
      - UK_REGULATORY_API_KEY=${UK_REGULATORY_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka

  # Analytics Service
  analytics-service:
    build:
      context: ./apps/backend/services/analytics
      dockerfile: Dockerfile.dev
    ports:
      - "8006:8006"
    volumes:
      - ./apps/backend/services/analytics:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8006
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_analytics
      - CLICKHOUSE_URL=http://clickhouse:8123
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - clickhouse
      - kafka

  # Risk Assessment Service
  risk-service:
    build:
      context: ./apps/backend/services/risk
      dockerfile: Dockerfile.dev
    ports:
      - "8007:8007"
    volumes:
      - ./apps/backend/services/risk:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8007
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_risk
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - neo4j
      - redis
      - kafka

  # Payment Service
  payment-service:
    build:
      context: ./apps/backend/services/payment
      dockerfile: Dockerfile.dev
    ports:
      - "8008:8008"
    volumes:
      - ./apps/backend/services/payment:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8008
      - DATABASE_URL=postgresql://hmnzd:${POSTGRES_PASSWORD}@postgres:5432/hmnzd_payment
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka

  # AI Orchestrator
  ai-orchestrator:
    build:
      context: ./apps/ai/orchestrator
      dockerfile: Dockerfile.dev
    ports:
      - "8009:8009"
    volumes:
      - ./apps/ai/orchestrator:/app
      - /app/node_modules
      - ai-models:/app/models
    environment:
      - NODE_ENV=development
      - PORT=8009
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - VERTEX_AI_CREDENTIALS=${VERTEX_AI_CREDENTIALS}
      - VECTOR_DB_URL=http://vector-db:6333
      - KAFKA_BROKERS=kafka:9092
      - MODEL_STORAGE_PATH=/app/models
      - ENABLE_AI_AGENTS=${ENABLE_AI_AGENTS:-true}
    depends_on:
      - redis
      - vector-db
      - kafka

  # Databases and Infrastructure

  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_USER=hmnzd
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=hmnzd_auth,hmnzd_compliance,hmnzd_consent,hmnzd_contract,hmnzd_regulatory,hmnzd_analytics,hmnzd_risk,hmnzd_payment

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-enterprise
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G

  # ClickHouse for Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # Vector Database
  vector-db:
    image: qdrant/qdrant:v1.4.1
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - vector-db-data:/qdrant/storage

  # Kafka for Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  # Monitoring: Grafana + Prometheus
  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.81.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
    depends_on:
      - jaeger

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.46
    ports:
      - "16686:16686" # UI
      - "14250:14250" # gRPC

volumes:
  postgres-data:
  redis-data:
  neo4j-data:
  neo4j-logs:
  clickhouse-data:
  vector-db-data:
  kafka-data:
  zookeeper-data:
  zookeeper-log:
  grafana-data:
  prometheus-data:
  contract-data:
  ai-models:
